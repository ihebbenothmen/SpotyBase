{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formChildGroup, route, router, auth) {\n    this.formChildGroup = formChildGroup;\n    this.route = route;\n    this.router = router;\n    this.auth = auth;\n    this.isSignedin = false;\n    this.error = '';\n    this.siteKey = '6Le0g8MlAAAAAKsY61qRO6Txkh6NinLCc7QHNasV';\n  }\n  ngOnInit() {\n    this.isSignedin = this.auth.isUserSignedin();\n    if (this.isSignedin) {\n      this.router.navigateByUrl('/front');\n    }\n    this.myFormLogin();\n  }\n  myFormLogin() {\n    this.checkoutParentGroup = this.formChildGroup.group({\n      user: this.formChildGroup.group({\n        email: new FormControl('', [Validators.required, Validators.pattern('^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$')]),\n        password: new FormControl('', [Validators.required])\n      })\n    });\n  }\n  doSignin() {\n    if (this.checkoutParentGroup.invalid) {\n      return this.checkoutParentGroup.markAllAsTouched();\n    }\n    this.auth.signin(this.checkoutParentGroup.controls['user'].value.email, this.checkoutParentGroup.controls['user'].value.password).subscribe({\n      next: response => {\n        this.router.navigateByUrl(\"/front\");\n      }\n    });\n    this.isSignedin = true;\n    return true;\n  }\n  get email() {\n    return this.checkoutParentGroup.get('user.email');\n  }\n  get password() {\n    return this.checkoutParentGroup.get('user.password');\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AASzE,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAW1BC,YAAoBC,cAA2B,EAAUC,KAAqB,EAAUC,MAAc,EAAUC,IAAiB;IAA7G,mBAAc,GAAdH,cAAc;IAAuB,UAAK,GAALC,KAAK;IAA0B,WAAM,GAANC,MAAM;IAAkB,SAAI,GAAJC,IAAI;IALpH,eAAU,GAAG,KAAK;IAElB,UAAK,GAAW,EAAE;IAGmH,IAAI,CAACC,OAAO,GAAG,0CAA0C;EAAE;EAEhMC,QAAQ;IAIP,IAAI,CAACC,UAAU,GAAG,IAAI,CAACH,IAAI,CAACI,cAAc,EAAE;IAE5C,IAAG,IAAI,CAACD,UAAU,EAAE;MACnB,IAAI,CAACJ,MAAM,CAACM,aAAa,CAAC,QAAQ,CAAC;;IAGpC,IAAI,CAACC,WAAW,EAAE;EACnB;EAGEA,WAAW;IACZ,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACV,cAAc,CAACW,KAAK,CAAC;MACnDC,IAAI,EAAC,IAAI,CAACZ,cAAc,CAACW,KAAK,CAAC;QAChCE,KAAK,EAAE,IAAIjB,WAAW,CAAC,EAAE,EAAC,CACxBC,UAAU,CAACiB,QAAQ,EACnBjB,UAAU,CAACkB,OAAO,CAAC,uCAAuC,CAAC,CAC5D,CAAC;QACFC,QAAQ,EAAE,IAAIpB,WAAW,CAAC,EAAE,EAAC,CAC3BC,UAAU,CAACiB,QAAQ,CACpB;OACC;KACF,CAAC;EACD;EAEFG,QAAQ;IAAI,IAAG,IAAI,CAACP,mBAAmB,CAACQ,OAAO,EAAC;MAC/C,OAAO,IAAI,CAACR,mBAAmB,CAACS,gBAAgB,EAAE;;IAIjD,IAAI,CAAChB,IAAI,CAACiB,MAAM,CACd,IAAI,CAACV,mBAAmB,CAACW,QAAQ,CAAC,MAAM,CAAC,CAACC,KAAK,CAACT,KAAK,EACrD,IAAI,CAACH,mBAAmB,CAACW,QAAQ,CAAC,MAAM,CAAC,CAACC,KAAK,CAACN,QAAQ,CACzD,CAACO,SAAS,CAAC;MACVC,IAAI,EAAEC,QAAQ,IAAG;QAClB,IAAI,CAACvB,MAAM,CAACM,aAAa,CAAC,QAAQ,CAAC;MAClC;KACD,CAAC;IAGF,IAAI,CAACF,UAAU,GAAG,IAAI;IACrB,OAAO,IAAI;EACd;EAEE,IAAIO,KAAK;IACR,OAAO,IAAI,CAACH,mBAAmB,CAACgB,GAAG,CAAC,YAAY,CAAC;EACnD;EACA,IAAIV,QAAQ;IACV,OAAO,IAAI,CAACN,mBAAmB,CAACgB,GAAG,CAAC,eAAe,CAAC;EACtD;CAgBD;AAjFY5B,cAAc,eAL1BH,SAAS,CAAC;EACTgC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW/B,cAAc,CAiF1B;SAjFYA,cAAc","names":["Component","FormControl","Validators","LoginComponent","constructor","formChildGroup","route","router","auth","siteKey","ngOnInit","isSignedin","isUserSignedin","navigateByUrl","myFormLogin","checkoutParentGroup","group","user","email","required","pattern","password","doSignin","invalid","markAllAsTouched","signin","controls","value","subscribe","next","response","get","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\IHEB\\Desktop\\User-final\\pidev-vff\\front\\src\\app\\User\\Front_end\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../security/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\tsiteKey:string;\n\t\n\t\n\n\t\n\tisSignedin = false;\n\n\terror: string = '';\n\tcheckoutParentGroup!: FormGroup;\n\n\tconstructor(private formChildGroup: FormBuilder, private route: ActivatedRoute, private router: Router, private auth: AuthService) { this.siteKey = '6Le0g8MlAAAAAKsY61qRO6Txkh6NinLCc7QHNasV'; }\n\n\tngOnInit() : void {\n\t\t\n\n\n\t\tthis.isSignedin = this.auth.isUserSignedin();\n\n\t\tif(this.isSignedin) {\n\t\t\tthis.router.navigateByUrl('/front');\n\t\t\t\n\t\t}\n\t\tthis.myFormLogin()\n\t}\n\t\n\t\n\t  myFormLogin(){\n\t\tthis.checkoutParentGroup = this.formChildGroup.group({\n\t\t  user:this.formChildGroup.group({\n\t\t\temail: new FormControl('',[\n\t\t\t  Validators.required,\n\t\t\t  Validators.pattern('^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$')\n\t\t\t]),\n\t\t\tpassword: new FormControl('',[\n\t\t\t  Validators.required\n\t\t\t])\n\t\t  })\n\t\t})\n\t  }\n\n\tdoSignin() {if(this.checkoutParentGroup.invalid){\n\t\treturn this.checkoutParentGroup.markAllAsTouched();\n\t  }\n\t\n\t\t  \n\t\t\tthis.auth.signin(\n\t\t\t  this.checkoutParentGroup.controls['user'].value.email,\n\t\t\t  this.checkoutParentGroup.controls['user'].value.password\n\t\t\t).subscribe({\n\t\t\t  next: response =>{\n\t\t\t\tthis.router.navigateByUrl(\"/front\")\n\t\t\t  }\n\t\t\t})\n\t\t  \n\t  \n\t  this.isSignedin = true;\n    return true;\n\t}\n  \n\t  get email(){\n    return this.checkoutParentGroup.get('user.email')\n  }\n  get password(){\n    return this.checkoutParentGroup.get('user.password')\n  }\n\t\n\n\t/*signInWithGoogle(): void {\n\t\tthis.authService.signIn(GoogleLoginProvider.PROVIDER_ID).then(\n\t\t  data => {\n\t\t\tthis.social.loginWithGoogle(data.idToken).subscribe({\n\t\t\t  next: response =>{\n\t\t\t\tthis.router.navigateByUrl(\"home\")\n\t\t\t  }\n\t\t\t})\n\t\t\tconsole.log(data.idToken)\n\t\t  }\n\t\t);\n\t  }*/\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}