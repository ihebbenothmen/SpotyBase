{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet ResetPasswordComponent = class ResetPasswordComponent {\n  constructor(formChildGroup, auth, router) {\n    this.formChildGroup = formChildGroup;\n    this.auth = auth;\n    this.router = router;\n    this.enableForm = true;\n  }\n  ngOnInit() {\n    this.myFormLogin();\n    this.myFormLoginReset();\n  }\n  myFormLogin() {\n    this.checkoutParentGroup = this.formChildGroup.group({\n      user: this.formChildGroup.group({\n        email: new FormControl('', [Validators.required, Validators.pattern('^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$')])\n      })\n    });\n  }\n  myFormLoginReset() {\n    this.checkoutParentGroupReset = this.formChildGroup.group({\n      newUser: this.formChildGroup.group({\n        code: new FormControl('', [Validators.required]),\n        password: new FormControl('', [Validators.required])\n      })\n    });\n  }\n  get code() {\n    return this.checkoutParentGroupReset.get('newUser.code');\n  }\n  get password() {\n    return this.checkoutParentGroupReset.get('newUser.password');\n  }\n  get email() {\n    return this.checkoutParentGroup.get('user.email');\n  }\n  done() {\n    if (this.checkoutParentGroup.invalid) {\n      this.checkoutParentGroup.markAllAsTouched();\n      return;\n    }\n    this.auth.checkEmail(this.checkoutParentGroup.controls['user'].value.email).subscribe({\n      next: response => {\n        if (response.result == 1) {\n          this.enableForm = false;\n        } else {\n          alert(\"Email doesn't Exist\");\n        }\n      }\n    });\n  }\n  resetNewPassword() {\n    if (this.checkoutParentGroup.invalid) {\n      this.checkoutParentGroup.markAllAsTouched();\n      return;\n    }\n    this.auth.resetPassword(this.checkoutParentGroup.controls['user'].value.email, this.checkoutParentGroupReset.controls['newUser'].value.code, this.checkoutParentGroupReset.controls['newUser'].value.password).subscribe({\n      next: response => {\n        if (response.result == 1) {\n          alert(\"Success Edit Password\");\n          this.router.navigateByUrl(\"/login\");\n        } else {\n          alert(\"Invalid Code\");\n        }\n      }\n    });\n  }\n};\nResetPasswordComponent = __decorate([Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})], ResetPasswordComponent);\nexport { ResetPasswordComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","Validators","ResetPasswordComponent","constructor","formChildGroup","auth","router","ngOnInit","myFormLogin","myFormLoginReset","checkoutParentGroup","group","user","email","required","pattern","checkoutParentGroupReset","newUser","code","password","get","done","invalid","markAllAsTouched","checkEmail","controls","value","subscribe","next","response","result","enableForm","alert","resetNewPassword","resetPassword","navigateByUrl","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\IHEB\\Desktop\\User-final\\pidev-vff\\front\\src\\app\\User\\Front_end\\reset-password\\reset-password.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../security/auth.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  checkoutParentGroup!: FormGroup;\n  checkoutParentGroupReset!: FormGroup;\n  enableForm: boolean = true;\n  constructor(private formChildGroup: FormBuilder,\n    private auth: AuthService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.myFormLogin()\n    this.myFormLoginReset()\n  }\n\n  myFormLogin() {\n    this.checkoutParentGroup = this.formChildGroup.group({\n      user: this.formChildGroup.group({\n        email: new FormControl('', [\n          Validators.required,\n          Validators.pattern('^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$')\n        ])\n      })\n    })\n  }\n  myFormLoginReset() {\n    this.checkoutParentGroupReset = this.formChildGroup.group({\n      newUser: this.formChildGroup.group({\n        code: new FormControl('', [\n          Validators.required,\n        ]),\n        password: new FormControl('', [\n          Validators.required,\n        ])\n      })\n    })\n  }\n  get code() {\n    return this.checkoutParentGroupReset.get('newUser.code')\n  }\n\n  get password() {\n    return this.checkoutParentGroupReset.get('newUser.password')\n  }\n\n  get email() {\n    return this.checkoutParentGroup.get('user.email')\n  }\n\n  done() {\n    if (this.checkoutParentGroup.invalid) {\n      this.checkoutParentGroup.markAllAsTouched()\n      return\n    }\n    this.auth.checkEmail(\n      this.checkoutParentGroup.controls['user'].value.email\n    ).subscribe({\n      next: response => {\n        if (response.result == 1) {\n          this.enableForm = false\n        } else {\n          alert(\"Email doesn't Exist\")\n        }\n      }\n    })\n\n  }\n\n  resetNewPassword() {\n    if (this.checkoutParentGroup.invalid) {\n      this.checkoutParentGroup.markAllAsTouched()\n      return\n    }\n    this.auth.resetPassword(\n      this.checkoutParentGroup.controls['user'].value.email,\n      this.checkoutParentGroupReset.controls['newUser'].value.code,\n      this.checkoutParentGroupReset.controls['newUser'].value.password\n    ).subscribe({\n      next: response => {\n        if (response.result == 1) {\n          alert(\"Success Edit Password\")\n          this.router.navigateByUrl(\"/login\")\n        } else {\n          alert(\"Invalid Code\")\n        }\n      }\n    })\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}