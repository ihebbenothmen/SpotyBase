{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SocialService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8060/InterMove/social';\n  }\n  loginWithGoogle(token) {\n    return this.http.post(`${this.baseUrl}/google`, {\n      token\n    }).pipe(map(response => {\n      sessionStorage.setItem(\"email\", response.email);\n      sessionStorage.setItem(\"token\", `Bearer ${response.token}`);\n      this.setId(response.user.id);\n      this.setRoles(response.user.userRoles);\n      return response;\n    }));\n  }\n  loginWithFacebook(token) {\n    return this.http.post(`${this.baseUrl}/facebook`, {\n      token\n    }).pipe(map(response => {\n      sessionStorage.setItem(\"email\", response.email);\n      sessionStorage.setItem(\"token\", `Bearer ${response.token}`);\n      return response;\n    }));\n  }\n  setRoles(roles) {\n    sessionStorage.setItem('roles', JSON.stringify(roles));\n  }\n  setId(id) {\n    sessionStorage.setItem('id', JSON.stringify(id));\n  }\n  getId() {\n    const id = sessionStorage.getItem('id');\n    if (id !== null) {\n      return JSON.parse(id);\n    }\n    return [];\n  }\n  getRoles() {\n    const roles = sessionStorage.getItem('roles');\n    if (roles !== null) {\n      return JSON.parse(roles);\n    }\n    return [];\n  }\n}\nSocialService.ɵfac = function SocialService_Factory(t) {\n  return new (t || SocialService)(i0.ɵɵinject(i1.HttpClient));\n};\nSocialService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SocialService,\n  factory: SocialService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,wCAAwC;EAGtD;EAEJC,eAAe,CAACC,KAAU;IACxB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,SAAS,EAAE;MAAEF;IAAK,CAAE,CAAC,CAACG,IAAI,CAClER,GAAG,CACDS,QAAQ,IAAG;MACTC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC/CF,cAAc,CAACC,OAAO,CAAC,OAAO,EAAE,UAAUF,QAAQ,CAACJ,KAAK,EAAE,CAAC;MAC3D,IAAI,CAACQ,KAAK,CAACJ,QAAQ,CAACK,IAAI,CAACC,EAAE,CAAC;MAC5B,IAAI,CAACC,QAAQ,CAACP,QAAQ,CAACK,IAAI,CAACG,SAAS,CAAC;MAItC,OAAOR,QAAQ;IACjB,CAAC,CACF,CACF;EACH;EAEAS,iBAAiB,CAACb,KAAU;IAC1B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,WAAW,EAAE;MAAEF;IAAK,CAAE,CAAC,CAACG,IAAI,CACpER,GAAG,CACDS,QAAQ,IAAG;MACTC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC/CF,cAAc,CAACC,OAAO,CAAC,OAAO,EAAE,UAAUF,QAAQ,CAACJ,KAAK,EAAE,CAAC;MAE3D,OAAOI,QAAQ;IACjB,CAAC,CACF,CACF;EACH;EAEOO,QAAQ,CAACG,KAAS;IACvBT,cAAc,CAACC,OAAO,CAAC,OAAO,EAAES,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC;EACxD;EACON,KAAK,CAACE,EAAU;IACrBL,cAAc,CAACC,OAAO,CAAC,IAAI,EAAES,IAAI,CAACC,SAAS,CAACN,EAAE,CAAC,CAAC;EAClD;EAEOO,KAAK;IACV,MAAMP,EAAE,GAAGL,cAAc,CAACa,OAAO,CAAC,IAAI,CAAC;IACvC,IAAIR,EAAE,KAAK,IAAI,EAAE;MACf,OAAOK,IAAI,CAACI,KAAK,CAACT,EAAE,CAAC;;IAEvB,OAAO,EAAE;EACX;EAEOU,QAAQ;IACb,MAAMN,KAAK,GAAGT,cAAc,CAACa,OAAO,CAAC,OAAO,CAAC;IAC7C,IAAIJ,KAAK,KAAK,IAAI,EAAE;MAClB,OAAOC,IAAI,CAACI,KAAK,CAACL,KAAK,CAAC;;IAE1B,OAAO,EAAE;EACX;;AAzDWlB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAyB,SAAbzB,aAAa;EAAA0B,YAFZ;AAAM","names":["map","SocialService","constructor","http","loginWithGoogle","token","post","baseUrl","pipe","response","sessionStorage","setItem","email","setId","user","id","setRoles","userRoles","loginWithFacebook","roles","JSON","stringify","getId","getItem","parse","getRoles","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\IHEB\\Desktop\\User-final\\pidev-vff\\front\\src\\app\\User\\Front_end\\login\\social.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocialService {\n  private baseUrl = 'http://localhost:8060/InterMove/social';\n\n  constructor(private http: HttpClient,\n  ) { }\n\n  loginWithGoogle(token: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/google`, { token }).pipe(\n      map(\n        response => {\n          sessionStorage.setItem(\"email\", response.email)\n          sessionStorage.setItem(\"token\", `Bearer ${response.token}`)\n          this.setId(response.user.id)\n          this.setRoles(response.user.userRoles)\n\n\n\n          return response;\n        }\n      )\n    )\n  }\n\n  loginWithFacebook(token: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/facebook`, { token }).pipe(\n      map(\n        response => {\n          sessionStorage.setItem(\"email\", response.email)\n          sessionStorage.setItem(\"token\", `Bearer ${response.token}`)\n\n          return response;\n        }\n      )\n    )\n  }\n\n  public setRoles(roles: []) {\n    sessionStorage.setItem('roles', JSON.stringify(roles));\n  }\n  public setId(id: string) {\n    sessionStorage.setItem('id', JSON.stringify(id));\n  }\n\n  public getId(): [] {\n    const id = sessionStorage.getItem('id');\n    if (id !== null) {\n      return JSON.parse(id);\n    }\n    return [];\n  }\n\n  public getRoles(): [] {\n    const roles = sessionStorage.getItem('roles');\n    if (roles !== null) {\n      return JSON.parse(roles);\n    }\n    return [];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}