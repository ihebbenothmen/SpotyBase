{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(route, router, http) {\n    this.route = route;\n    this.router = router;\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/InterMove/';\n    this.isLoggedIn = false;\n    this.tokenExpirationTime = 5000; // 5 seconds\n    this.expirationTimestamp = Date.now() + this.tokenExpirationTime;\n  }\n  signin(email, password) {\n    return this.http.post(this.baseUrl + 'authenticate', {\n      email,\n      password\n    }, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }).pipe(map(resp => {\n      sessionStorage.setItem(\"email\", resp.email);\n      sessionStorage.setItem(\"token\", `Bearer ${resp.token}`);\n      return resp;\n    }));\n    this.isLoggedIn = true;\n  }\n  signup(request) {\n    return this.http.post(this.baseUrl + 'signup', request, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'text'\n    }).pipe(map(resp => {\n      return resp;\n    }));\n  }\n  userActive(email, password) {\n    return this.http.post(`${this.baseUrl}active`, {\n      email,\n      password\n    }).pipe(map(response => {\n      return response;\n    }));\n  }\n  activeAccount(mail, code) {\n    return this.http.post(`${this.baseUrl}activated`, {\n      mail,\n      code\n    }).pipe(map(response => {\n      return response;\n    }));\n  }\n  checkEmail(email) {\n    return this.http.post(`${this.baseUrl}checkEmail`, {\n      email\n    }).pipe(map(response => {\n      return response;\n    }));\n  }\n  resetPassword(email, code, password) {\n    return this.http.post(`${this.baseUrl}resetPassword`, {\n      email,\n      code,\n      password\n    }).pipe(map(response => {\n      return response;\n    }));\n  }\n  signout() {\n    sessionStorage.removeItem('email');\n    sessionStorage.removeItem('token');\n    this.router.navigateByUrl('login');\n  }\n  isUserSignedin() {\n    return sessionStorage.getItem('token') !== null;\n  }\n  getSignedinUser() {\n    return sessionStorage.getItem('user');\n  }\n  getSignInPhoneNumber() {\n    return sessionStorage.getItem('phone_number');\n  }\n  isLogin() {\n    return !(sessionStorage.getItem('email') == null || sessionStorage.getItem('token') == null);\n  }\n  getToken() {\n    let token = sessionStorage.getItem('token');\n    return token;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","map","AuthService","constructor","route","router","http","Date","now","tokenExpirationTime","signin","email","password","post","baseUrl","headers","pipe","resp","sessionStorage","setItem","token","isLoggedIn","signup","request","responseType","userActive","response","activeAccount","mail","code","checkEmail","resetPassword","signout","removeItem","navigateByUrl","isUserSignedin","getItem","getSignedinUser","getSignInPhoneNumber","isLogin","getToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\IHEB\\Desktop\\User-final\\pidev-vff\\front\\src\\app\\User\\security\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, map } from 'rxjs';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class AuthService {\n\t\n\tprivate baseUrl = 'http://localhost:8080/InterMove/';\n\tisLoggedIn = false;\n\t tokenExpirationTime = 5000; // 5 seconds\n     expirationTimestamp = Date.now() + this.tokenExpirationTime;\n\n\n\tconstructor(private route: ActivatedRoute, private router: Router, private http: HttpClient) { }\n\n\tsignin(email: any,password: any): Observable<any> {\n\t\treturn this.http.post<any>(this.baseUrl + 'authenticate', {email,password}, {headers: new HttpHeaders({ 'Content-Type': 'application/json' })}).pipe(map((resp) => {\n\t\t\tsessionStorage.setItem(\"email\",resp.email)\n          sessionStorage.setItem(\"token\",`Bearer ${resp.token}`)\n\t\t  \n\t\t\treturn resp;\n\t\t}));\n\t\tthis.isLoggedIn = true;\n\t}\n\n\tsignup(request: Request): Observable<any> {\n\t\treturn this.http.post<any>(this.baseUrl + 'signup', request, {headers: new HttpHeaders({ 'Content-Type': 'application/json' }), responseType: 'text' as 'json'}).pipe(map((resp) => {                                                         \n\t\t\treturn resp;\n\t\t}));\n\t}\n\n\n\t\n\tuserActive(email: any,password: any): Observable<any>{\n\t\treturn this.http.post<any>(`${this.baseUrl}active`,{email,password}).pipe(\n\t\t  map(\n\t\t\tresponse => {\n\t\t\t  return response;\n\t\t\t}\n\t\t  )\n\t\t)\n\t  }\n\n\n\tactiveAccount(mail: any,code: any):Observable<any>{\n\t\treturn this.http.post<any>(`${this.baseUrl}activated`,{mail,code}).pipe(\n\t\t  map(\n\t\t\tresponse => {\n\t\t\t  return response;\n\t\t\t}\n\t\t  )\n\t\t)\n\t  }\n\t\n\t  checkEmail(email: any):Observable<any>{\n\t\treturn this.http.post<any>(`${this.baseUrl}checkEmail`,{email}).pipe(\n\t\t  map(\n\t\t\tresponse => {\n\t\t\t  return response;\n\t\t\t}\n\t\t  )\n\t\t)\n\t  }\n\t\n\t  resetPassword(email: any,code: any,password: any):Observable<any>{\n\t\treturn this.http.post<any>(`${this.baseUrl}resetPassword`,{email,code,password}).pipe(\n\t\t  map(\n\t\t\tresponse => {\n\t\t\t  return response;\n\t\t\t}\n\t\t  )\n\t\t)\n\t  }\n\n\tsignout() {\n\t\tsessionStorage.removeItem('email');\n\t\tsessionStorage.removeItem('token');\n\n\t\tthis.router.navigateByUrl('login');\n\t}\n\n\tisUserSignedin() {\n\t\treturn sessionStorage.getItem('token') !== null;\n\t\t\n\t}\n\n\tgetSignedinUser() {\n\t\treturn sessionStorage.getItem('user') as string;\n\t\t\n\t}\n\tgetSignInPhoneNumber() {\n\t\treturn sessionStorage.getItem('phone_number') as string;\n\t\t\n\t}\n\tisLogin(){\n\t\treturn !(sessionStorage.getItem('email') == null ||\n\t\t\t   sessionStorage.getItem('token') == null);\n\t  }\n\tgetToken() {\n\t\tlet token = sessionStorage.getItem('token') as string;\n\t\treturn token;\n\t}\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}