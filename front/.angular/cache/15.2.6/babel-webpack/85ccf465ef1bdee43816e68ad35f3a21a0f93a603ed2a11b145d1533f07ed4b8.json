{"ast":null,"code":"import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class HttpInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    if (this.authService.isUserSignedin() && this.authService.getToken()) {\n      const request = req.clone({\n        headers: new HttpHeaders({\n          'Authorization': this.authService.getToken()\n        })\n      });\n      return next.handle(request).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse && err.status === 401) {\n          this.authService.signout();\n        }\n        return throwError(err);\n      }));\n    }\n    return next.handle(req);\n  }\n}\nHttpInterceptorService.ɵfac = function HttpInterceptorService_Factory(t) {\n  return new (t || HttpInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nHttpInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpInterceptorService,\n  factory: HttpInterceptorService.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,iBAAiB,EAA0BC,WAAW,QAAsC,sBAAsB;AAC3H,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAGzD,OAAM,MAAOC,sBAAsB;EAE/BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,IAAI,IAAI,CAACH,WAAW,CAACI,cAAc,EAAE,IAAI,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE,EAAE;MAClE,MAAMC,OAAO,GAAGJ,GAAG,CAACK,KAAK,CAAC;QACtBC,OAAO,EAAE,IAAIb,WAAW,CAAC;UACrB,eAAe,EAAE,IAAI,CAACK,WAAW,CAACK,QAAQ;SAC7C;OACJ,CAAC;MACF,OAAOF,IAAI,CAACM,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CACxCd,UAAU,CAACe,GAAG,IAAG;QAChB,IAAGA,GAAG,YAAYjB,iBAAiB,IAAIiB,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UAC1D,IAAI,CAACZ,WAAW,CAACa,OAAO,EAAE;;QAE3B,OAAOhB,UAAU,CAACc,GAAG,CAAC;MACvB,CAAC,CAAC,CACF;;IAGF,OAAOR,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EACrB;;AAtBSJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAgB,SAAtBhB,sBAAsB;AAAA","names":["HttpErrorResponse","HttpHeaders","catchError","throwError","HttpInterceptorService","constructor","authService","intercept","req","next","isUserSignedin","getToken","request","clone","headers","handle","pipe","err","status","signout","factory"],"sourceRoot":"","sources":["C:\\Users\\IHEB\\Desktop\\SpotyBase\\front\\src\\app\\User\\security\\http-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\n \n@Injectable()\nexport class HttpInterceptorService implements HttpInterceptor {\n \n    constructor(private authService: AuthService) { }\n \n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.authService.isUserSignedin() && this.authService.getToken()) {\n            const request = req.clone({\n                headers: new HttpHeaders({\n                    'Authorization': this.authService.getToken()\n                })\n            });\n            return next.handle(request).pipe(\n\t\t\t\tcatchError(err => {\n\t\t\t\t\tif(err instanceof HttpErrorResponse && err.status === 401) {\n\t\t\t\t\t\tthis.authService.signout();\n\t\t\t\t\t}\n\t\t\t\t\treturn throwError(err);\n\t\t\t\t})\n\t\t\t);\n        }\n       \n\t\treturn next.handle(req);\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}